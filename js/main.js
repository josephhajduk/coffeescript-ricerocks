// Generated by CoffeeScript 1.4.0
(function() {
  var ImageInfo, Ship, Sprite, angle_to_vector, asteroid_image, asteroid_info, canvas, click, debris_image, debris_info, dist, draw, explosion_group, explosion_image, explosion_info, explosion_sound, gameloop, group_collide, group_group_collide, height, keydown, keyleft, keyright, keyup, lives, missile_group, missile_image, missile_info, missile_sound, my_context, my_ship, nebula_image, nebula_info, process_sprite_group, reset, rock_group, rock_spawner, score, ship_image, ship_info, ship_thrust_sound, soundtrack, splash_image, splash_info, start, started, time, timer, width;

  width = 800;

  height = 600;

  score = 0;

  lives = 3;

  time = 0;

  started = false;

  explosion_group = [];

  ImageInfo = (function() {

    function ImageInfo(center, size, radius, lifespan, animated) {
      this.center = center;
      this.size = size;
      this.radius = radius != null ? radius : 0;
      this.lifespan = lifespan != null ? lifespan : Infinity;
      this.animated = animated != null ? animated : false;
    }

    ImageInfo.prototype.get_center = function(self) {
      return this.center;
    };

    ImageInfo.prototype.get_size = function(self) {
      return this.size;
    };

    ImageInfo.prototype.get_radius = function(self) {
      return this.radius;
    };

    ImageInfo.prototype.get_lifespan = function(self) {
      return this.lifespan;
    };

    ImageInfo.prototype.get_animated = function(self) {
      return this.animated;
    };

    return ImageInfo;

  })();

  debris_info = new ImageInfo([320, 240], [640, 480]);

  debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png");

  nebula_info = new ImageInfo([400, 300], [800, 600]);

  nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.png");

  splash_info = new ImageInfo([200, 150], [400, 300]);

  splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png");

  ship_info = new ImageInfo([45, 45], [90, 90], 35);

  ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png");

  missile_info = new ImageInfo([5, 5], [10, 10], 3, 50);

  missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png");

  asteroid_info = new ImageInfo([45, 45], [90, 90], 40);

  asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png");

  explosion_info = new ImageInfo([64, 64], [128, 128], 17, 24, true);

  explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png");

  soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3");

  missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3");

  missile_sound.set_volume(.5);

  ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3");

  explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3");

  angle_to_vector = function(ang) {
    return [Math.cos(ang), Math.sin(ang)];
  };

  dist = function(p, q) {
    return Math.sqrt(Math.pow(p[0] - q[0], 2) + Math.pow(p[1] - q[1], 2));
  };

  process_sprite_group = function(a_set, canvas) {
    var sprite, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = a_set.length; _i < _len; _i++) {
      sprite = a_set[_i];
      if (sprite != null) {
        if (sprite.update() === false) {
          a_set.remove(sprite);
        }
        _results.push(sprite.draw(canvas));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  group_collide = function(group_set, other_object) {
    var item, new_explosion, remove_collided, _i, _len;
    remove_collided = [];
    for (_i = 0, _len = group_set.length; _i < _len; _i++) {
      item = group_set[_i];
      if (item.collide(other_object)) {
        remove_collided.push(item);
        new_explosion = new Sprite(item.pos, [0, 0], 0, 0, explosion_image, explosion_info, explosion_sound);
        explosion_group.push(new_explosion);
      }
    }
    if (len(remove_collided) > 0) {
      group_set.difference_update(remove_collided);
    }
    return len(remove_collided);
  };

  group_group_collide = function(group_one, group_two) {
    var item, remove_collided, _i, _len;
    remove_collided = [];
    for (_i = 0, _len = group_one.length; _i < _len; _i++) {
      item = group_one[_i];
      if (group_collide(group_two, item) > 0) {
        remove_collided.push(item);
      }
    }
    group_one.difference_update(remove_collided);
    return len(remove_collided);
  };

  reset = function() {
    var destroy, item, _i, _len, _results;
    started = false;
    destroy = rock_group;
    _results = [];
    for (_i = 0, _len = destroy.length; _i < _len; _i++) {
      item = destroy[_i];
      _results.push(rock_group.remove(item));
    }
    return _results;
  };

  start = function() {
    score = 0;
    lives = 3;
    time = 0;
    my_ship.reset();
    soundtrack.rewind();
    return soundtrack.play();
  };

  Sprite = (function() {

    function Sprite(pos, vel, ang, ang_vel, image, info, sound) {
      this.pos = [pos[0], pos[1]];
      this.vel = [vel[0], vel[1]];
      this.angle = ang;
      this.angle_vel = ang_vel;
      this.image = image;
      this.image_center = info.get_center();
      this.image_size = info.get_size();
      this.radius = info.get_radius();
      this.lifespan = info.get_lifespan();
      this.animated = info.get_animated();
      this.age = 0;
      if (sound) {
        sound.rewind();
        sound.play();
      }
    }

    Sprite.prototype.get_position = function() {
      return this.pos;
    };

    Sprite.prototype.collide = function(other_object) {
      if (dist(this.get_position(), other_object.get_position()) <= (this.radius + other_object.radius)) {
        return true;
      } else {
        return false;
      }
    };

    Sprite.prototype.draw = function(context) {
      if (this.animated) {
        return simplegui.draw_image(context, this.image, [this.image_center[0] + (this.image_size[0] * this.age), this.image_center[1]], this.image_size, this.pos, this.image_size, this.angle);
      } else {
        return simplegui.draw_image(context, this.image, this.image_center, this.image_size, this.pos, this.image_size, this.angle);
      }
    };

    Sprite.prototype.update = function() {
      this.angle += this.angle_vel;
      this.pos[0] = (this.pos[0] + this.vel[0]).mod(width);
      this.pos[1] = (this.pos[1] + this.vel[1]).mod(height);
      this.age += 1;
      if (this.age < this.lifespan) {
        return true;
      } else {
        return false;
      }
    };

    return Sprite;

  })();

  Ship = (function() {

    function Ship(pos, vel, angle, image, info) {
      this.pos = [pos[0], pos[1]];
      this.vel = [vel[0], vel[1]];
      this.thrust = false;
      this.angle = angle;
      this.angle_vel = 0;
      this.image = image;
      this.image_center = info.get_center();
      this.image_size = info.get_size();
      this.radius = info.get_radius();
    }

    Ship.prototype.draw = function(context) {
      if (this.thrust) {
        return simplegui.draw_image(context, this.image, [this.image_center[0] + this.image_size[0], this.image_center[1]], this.image_size, this.pos, this.image_size, this.angle);
      } else {
        return simplegui.draw_image(context, this.image, this.image_center, this.image_size, this.pos, this.image_size, this.angle);
      }
    };

    Ship.prototype.update = function() {
      var acc;
      this.angle += this.angle_vel;
      this.pos[0] = (this.pos[0] + this.vel[0]).mod(width);
      this.pos[1] = (this.pos[1] + this.vel[1]).mod(height);
      if (this.thrust) {
        acc = angle_to_vector(this.angle);
        this.vel[0] += acc[0] * .1;
        this.vel[1] += acc[1] * .1;
      }
      this.vel[0] *= .99;
      return this.vel[1] *= .99;
    };

    Ship.prototype.get_position = function() {
      return this.pos;
    };

    Ship.prototype.set_thrust = function(thrust_on) {
      this.thrust = thrust_on;
      if (thrust_on) {
        ship_thrust_sound.rewind();
        return ship_thrust_sound.play();
      } else {
        return ship_thrust_sound.pause();
      }
    };

    Ship.prototype.increment_angle_vel = function() {
      return this.angle_vel += .05;
    };

    Ship.prototype.decrement_angle_vel = function() {
      return this.angle_vel -= .05;
    };

    Ship.prototype.shoot = function() {
      var a_missile, forward, missile_pos, missile_vel;
      forward = angle_to_vector(this.angle);
      missile_pos = [this.pos[0] + this.radius * forward[0], this.pos[1] + this.radius * forward[1]];
      missile_vel = [this.vel[0] + 6 * forward[0], this.vel[1] + 6 * forward[1]];
      a_missile = new Sprite(missile_pos, missile_vel, this.angle, 0, missile_image, missile_info, missile_sound);
      return missile_group.push(a_missile);
    };

    Ship.prototype.reset = function() {
      this.pos = [width / 2, height / 2];
      this.vel = [0, 0];
      this.thrust = false;
      this.angle = 0;
      return this.angle_vel = 0;
    };

    return Ship;

  })();

  keyleft = false;

  keyright = false;

  keydown = function(key) {
    if (key === simplegui.KEY_MAP['left'] && keyleft === false) {
      my_ship.decrement_angle_vel();
      return keyleft = true;
    } else if (key === simplegui.KEY_MAP['right'] && keyright === false) {
      my_ship.increment_angle_vel();
      return keyright = true;
    } else if (key === simplegui.KEY_MAP['up']) {
      return my_ship.set_thrust(true);
    } else if (key === simplegui.KEY_MAP['space']) {
      return my_ship.shoot();
    }
  };

  keyup = function(key) {
    if (key === simplegui.KEY_MAP['left'] && keyleft === true) {
      console.log("left up");
      my_ship.increment_angle_vel();
      return keyleft = false;
    } else if (key === simplegui.KEY_MAP['right'] && keyright === true) {
      console.log("right up");
      my_ship.decrement_angle_vel();
      return keyright = false;
    } else if (key === simplegui.KEY_MAP['up']) {
      return my_ship.set_thrust(false);
    }
  };

  click = function(pos) {
    var center, inheight, inwidth, size, _ref, _ref1;
    center = [width / 2, height / 2];
    size = splash_info.get_size();
    inwidth = ((center[0] - size[0] / 2) < (_ref = pos[0]) && _ref < (center[0] + size[0] / 2));
    inheight = ((center[1] - size[1] / 2) < (_ref1 = pos[1]) && _ref1 < (center[1] + size[1] / 2));
    if ((!started) && inwidth && inheight) {
      started = true;
      return start();
    }
  };

  draw = function(context) {
    var center, size, wtime;
    lives -= group_collide(rock_group, my_ship);
    if (lives === 0) {
      reset();
    }
    score += group_group_collide(missile_group, rock_group);
    time += 1;
    center = debris_info.get_center();
    size = debris_info.get_size();
    wtime = (time / 8).mod(center[0]);
    simplegui.draw_image(context, nebula_image, nebula_info.get_center(), nebula_info.get_size(), [width / 2, height / 2], [width, height]);
    simplegui.draw_image(context, debris_image, [center[0] - wtime, center[1]], [size[0] - 2 * wtime, size[1]], [width / 2 + 1.25 * wtime, height / 2], [width - 2.5 * wtime, height]);
    simplegui.draw_image(context, debris_image, [size[0] - wtime, center[1]], [2 * wtime, size[1]], [1.25 * wtime, height / 2], [2.5 * wtime, height]);
    simplegui.draw_text(context, "Lives", [50, 50], 22, "White");
    simplegui.draw_text(context, "Score", [680, 50], 22, "White");
    simplegui.draw_text(context, str(lives), [50, 80], 22, "White");
    simplegui.draw_text(context, str(score), [680, 80], 22, "White");
    my_ship.draw(context);
    process_sprite_group(rock_group, context);
    process_sprite_group(missile_group, context);
    process_sprite_group(explosion_group, context);
    my_ship.update();
    if (!started) {
      return simplegui.draw_image(context, splash_image, splash_info.get_center(), splash_info.get_size(), [width / 2, height / 2], splash_info.get_size());
    }
  };

  rock_spawner = function() {
    var a_rock, rock_avel, rock_pos, rock_vel;
    if (started === true) {
      rock_pos = [random.randrange(0, width), random.randrange(0, height)];
      rock_vel = [random.random() * .6 - .3, random.random() * .6 - .3];
      rock_avel = random.random() * .2 - .1;
      a_rock = new Sprite(rock_pos, rock_vel, 0, rock_avel, asteroid_image, asteroid_info);
      if (len(rock_group) < 12 && started === true) {
        if (dist(a_rock.pos, my_ship.get_position()) > 150) {
          return rock_group.push(a_rock);
        }
      }
    }
  };

  canvas = document.getElementById('game_canvas');

  my_context = canvas.getContext('2d');

  my_ship = new Ship([width / 2, height / 2], [0, 0], 0, ship_image, ship_info);

  rock_group = [];

  missile_group = [];

  start();

  document.addEventListener('keyup', function(event) {
    console.log(event.keyCode);
    return keyup(event.keyCode);
  });

  document.addEventListener('keydown', function(event) {
    console.log(event.keyCode);
    return keydown(event.keyCode);
  });

  canvas.addEventListener('click', function(event) {
    var x, y;
    x = event.pageX - canvas.offsetLeft;
    y = event.pageY - canvas.offsetTop;
    return click([x, y]);
  });

  timer = setInterval(rock_spawner, 1000);

  gameloop = function() {
    canvas.width = canvas.width;
    draw(my_context);
    return webkitRequestAnimationFrame(gameloop);
  };

  gameloop();

}).call(this);
